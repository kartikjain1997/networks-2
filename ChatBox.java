/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tcpchatwindow;

/**
 *
 * @author HULK
 */
import java.util.*;
import java.io.*;
import java.net.*;
import javax.swing.SwingUtilities;
public class ChatBox extends javax.swing.JFrame {

    /**
     * Creates new form ChatBox
     */
    ServerSocket myServerSocket;
    Socket connection,myClient;
    String prog;
    DataInputStream inputData;
    DataOutputStream outputData,outputData1;
     ArrayList<Socket> jump;
     int count=0;
    public ChatBox() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        rid1 = new javax.swing.JRadioButton();
        rid2 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        sip = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        sport = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        box = new javax.swing.JTextArea();
        inner = new javax.swing.JTextField();
        input = new javax.swing.JLabel();
        connect = new javax.swing.JButton();
        disconnect = new javax.swing.JButton();
        label = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup1.add(rid1);
        rid1.setText("Server");
        rid1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rid1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(rid2);
        rid2.setText("Client");

        jLabel1.setText("Server IP:");

        jLabel2.setText("Port:");

        box.setColumns(20);
        box.setRows(5);
        jScrollPane1.setViewportView(box);

        input.setText("Input:");

        connect.setText("Sign In");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        disconnect.setText("Sign Out");
        disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectActionPerformed(evt);
            }
        });

        label.setText("Disconnected");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(disconnect)
                        .addGap(66, 66, 66))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(sport, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(sip, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(rid1)
                                    .addGap(69, 69, 69)
                                    .addComponent(rid2))
                                .addComponent(jScrollPane1)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(inner, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(43, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rid1)
                    .addComponent(rid2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connect)
                    .addComponent(disconnect))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(label))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        // TODO add your handling code here:
     
        if(rid1.isSelected()){
        
        prog="Server";
        jump=new ArrayList<Socket>();
        try{
        myServerSocket= new ServerSocket(Integer.parseInt(sport.getText().toString()));
        }
        catch(Exception e){
        e.printStackTrace();
        }
        
        for(int i=0;i<2;i++){
        count++;
        Thread k =new Thread(new Runnable() {
        @Override
        public void run() {
        try{
        
        connection=myServerSocket.accept();
        jump.add(connection);
        System.out.print(jump.get(jump.size()-1));
        
        System.out.println("The connection has started....");
        label.setText("Connected");
        final int g=jump.size()-1;
        System.out.print(g);
       // inputData=new DataInputStream(jump.get(g).getInputStream());
        while(true){
        inputData=new DataInputStream(jump.get(g).getInputStream());    
        String s=inputData.readUTF();
        for(int z=0;z<count;z++){
        if(jump.get(z).getPort()!=jump.get(g).getPort())   { 
        outputData1=new DataOutputStream(jump.get(z).getOutputStream()); 
        outputData1.writeUTF(s);
        }
       
        if(s!=null){
        box.setText(box.getText().toString()+"Client"+sport.getText().toString()+": "+s+"\n");
        }
        }
        }
        }
        
        catch(Exception e){
        e.printStackTrace();
        }
            }
        });
        k.start();
        }
        }
        if(rid2.isSelected()){
        prog="Client";
        try{
        myClient=new Socket(sip.getText().toString(),Integer.parseInt(sport.getText().toString()));
        }
        catch(Exception e){
        e.printStackTrace();
        }
        Thread kg=new Thread(new Runnable() {
            @Override
        public void run() {
        try{
        label.setText("Connected");
        System.out.println("connection Success");
        inputData=new DataInputStream(myClient.getInputStream());
        while(true){
        String s=inputData.readUTF();
        if(s!=null){
        box.setText(box.getText().toString()+"Server:"+sport.getText().toString()+": "+s+"\n");
        }
        }
        }
        catch(Exception e){
        e.printStackTrace();
        }
            }
        });
        kg.start();
        }
          
     
        
    }//GEN-LAST:event_connectActionPerformed

    private void disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectActionPerformed
        // TODO add your handling code here:
      Thread k1=new Thread(new Runnable() {
          @Override
        public void run() {
        if(prog=="Server"){
        try{
        connection.close();
        }
        catch(Exception e){
        e.printStackTrace();
        }
        }
        if(prog=="Client"){
        try{
        myClient.close();
        }
        catch(Exception e){
        e.printStackTrace();
        }
        }
          }
      });
       k1.start();
        
    }//GEN-LAST:event_disconnectActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       Thread k2=new Thread(new Runnable() {
           @Override
        public void run() {
        if(prog=="Server"){
        try{
           
            
        String s=inner.getText().toString();
        inner.setText("");
        box.setText(box.getText().toString()+"Server"+sport.getText().toString()+": "+s+"\n");
         for(int i=0;i<count;i++){
        outputData=new DataOutputStream(jump.get(i).getOutputStream());
        outputData.writeUTF(s);
         }
        }
        catch(Exception e){
        e.printStackTrace();
        }
        }
        if(prog=="Client"){
        try{
        outputData=new DataOutputStream(myClient.getOutputStream());
        String s=inner.getText().toString();
        box.setText(box.getText().toString()+"Client"+sport.getText().toString()+": "+s+"\n");
        inner.setText("");
        outputData.writeUTF(s);
        }
        catch(Exception e){
        e.printStackTrace();
        }
        }
                          }
       });
       k2.start();
       
     
    }//GEN-LAST:event_jButton1ActionPerformed

    private void rid1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rid1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rid1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatBox().setVisible(true);
                 
                  sip.setText("127.0.0.1");
                  sport.setText("5055");
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea box;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton connect;
    private javax.swing.JButton disconnect;
    private javax.swing.JTextField inner;
    private javax.swing.JLabel input;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JRadioButton rid1;
    private javax.swing.JRadioButton rid2;
    private static javax.swing.JTextField sip;
    private static javax.swing.JTextField sport;
    // End of variables declaration//GEN-END:variables
}
